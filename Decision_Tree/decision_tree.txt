
import pandas as pd
data = pd.read_csv('zoo_DT.csv')
data.head()
1	0	0.1	1.1	0.2	0.3	1.2	1.3	1.4	1.5	0.4	0.5	4	0.6	0.7	1.6	1.7
0	1	0	0	1	0	0	0	1	1	1	0	0	4	1	0	1	1
1	0	0	1	0	0	1	1	1	1	0	0	1	0	1	0	0	4
2	1	0	0	1	0	0	1	1	1	1	0	0	4	0	0	1	1
3	1	0	0	1	0	0	1	1	1	1	0	0	4	1	0	1	1
4	1	0	0	1	0	0	0	1	1	1	0	0	4	1	0	1	1

y = data["1.7"]
import numpy as np
y = np.array(y)
print(y)
[1 4 1 1 1 1 4 4 1 1 2 4 7 7 7 2 1 4 1 2 2 1 2 6 5 5 1 1 1 6 1 1 2 4 1 1 2
 4 6 6 2 6 2 1 1 7 1 1 1 1 6 5 7 1 1 2 2 2 2 4 4 3 1 1 1 1 1 1 1 1 2 7 4 1
 1 3 7 2 2 3 7 4 2 1 7 4 2 6 5 3 3 4 1 1 2 1 6 1 7 2]
 
x = data.drop(columns=["1.7"])
print(x)
    1  0  0.1  1.1  0.2  0.3  1.2  1.3  1.4  1.5  0.4  0.5  4  0.6  0.7  1.6
0   1  0    0    1    0    0    0    1    1    1    0    0  4    1    0    1
1   0  0    1    0    0    1    1    1    1    0    0    1  0    1    0    0
2   1  0    0    1    0    0    1    1    1    1    0    0  4    0    0    1
3   1  0    0    1    0    0    1    1    1    1    0    0  4    1    0    1
4   1  0    0    1    0    0    0    1    1    1    0    0  4    1    0    1
.. .. ..  ...  ...  ...  ...  ...  ...  ...  ...  ...  ... ..  ...  ...  ...
95  1  0    0    1    0    0    0    1    1    1    0    0  2    1    0    1
96  1  0    1    0    1    0    0    0    0    1    1    0  6    0    0    0
97  1  0    0    1    0    0    1    1    1    1    0    0  4    1    0    1
98  0  0    1    0    0    0    0    0    0    1    0    0  0    0    0    0
99  0  1    1    0    1    0    0    0    1    1    0    0  2    1    0    0

[100 rows x 16 columns]

x = np.array(x)
x
array([[1, 0, 0, ..., 1, 0, 1],
       [0, 0, 1, ..., 1, 0, 0],
       [1, 0, 0, ..., 0, 0, 1],
       ...,
       [1, 0, 0, ..., 1, 0, 1],
       [0, 0, 1, ..., 0, 0, 0],
       [0, 1, 1, ..., 1, 0, 0]])
       
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

X_train,X_test,Y_train,Y_test = train_test_split(x,y,test_size=0.3)
X_train
array([[0, 1, 1, ..., 1, 1, 0],
       [1, 0, 0, ..., 0, 1, 1],
       [0, 0, 1, ..., 1, 0, 0],
       ...,
       [1, 0, 0, ..., 1, 1, 1],
       [1, 0, 0, ..., 1, 0, 1],
       [0, 1, 1, ..., 1, 0, 0]])
       
X_test
array([[1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 1, 0, 1],
       [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 2, 0, 0, 1],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 4, 1, 1, 1],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 4, 1, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 4, 1, 0, 0],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1],
       [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1, 1, 0],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 4, 0, 0, 0],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 4, 0, 0, 0],
       [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 1, 0, 1],
       [0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0, 0],
       [0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0],
       [0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 2, 1, 0, 1],
       [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1],
       [1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 2, 1, 0, 0],
       [1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 4, 1, 0, 1],
       [0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1],
       [1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 6, 0, 0, 0],
       [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 4, 1, 0, 1],
       [0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1],
       [0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]])
       
Y_train
array([2, 1, 4, 2, 1, 1, 4, 7, 5, 2, 2, 2, 5, 1, 7, 1, 1, 3, 2, 2, 6, 7,
       3, 1, 7, 1, 7, 1, 2, 2, 1, 3, 2, 7, 1, 1, 4, 1, 3, 4, 6, 6, 2, 7,
       6, 7, 1, 1, 4, 2, 2, 1, 6, 7, 4, 1, 6, 4, 3, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 2])
       
Y_test
array([1, 4, 1, 4, 1, 1, 4, 1, 1, 4, 2, 5, 1, 5, 2, 1, 4, 4, 6, 2, 2, 1,
       1, 1, 2, 6, 2, 1, 1, 7])
       
inst = DecisionTreeClassifier()
inst = inst.fit(X_train,Y_train)
Y_pred = inst.predict(X_test)
Y_pred
array([1, 4, 1, 4, 1, 1, 4, 1, 1, 4, 2, 5, 1, 5, 2, 1, 4, 4, 6, 2, 2, 1,
       1, 1, 2, 6, 2, 1, 1, 7])
       
from sklearn import metrics
from sklearn.metrics import precision_recall_fscore_support
acc = metrics.accuracy_score(Y_test,Y_pred)
print(acc)
1.0

print("Precision,recall,F score is",precision_recall_fscore_support(Y_test,Y_pred,average='macro'))
Precision,recall,F score is (1.0, 1.0, 1.0, None)

import graphviz
import matplotlib.pyplot as plt
from sklearn import tree

plt.figure(figsize=(20,20))
tree.plot_tree(inst,fontsize=10)
[Text(0.7777777777777778, 0.9375, 'X[3] <= 0.5\ngini = 0.771\nsamples = 70\nvalue = [27, 14, 5, 7, 2, 6, 9]'),
 Text(0.6666666666666666, 0.8125, 'X[1] <= 0.5\ngini = 0.789\nsamples = 43\nvalue = [0, 14, 5, 7, 2, 6, 9]'),
 Text(0.5555555555555556, 0.6875, 'X[11] <= 0.5\ngini = 0.768\nsamples = 29\nvalue = [0, 0, 5, 7, 2, 6, 9]'),
 Text(0.4444444444444444, 0.5625, 'X[8] <= 0.5\ngini = 0.698\nsamples = 22\nvalue = [0, 0, 5, 0, 2, 6, 9]'),
 Text(0.2222222222222222, 0.4375, 'X[9] <= 0.5\ngini = 0.48\nsamples = 15\nvalue = [0, 0, 0, 0, 0, 6, 9]'),
 Text(0.1111111111111111, 0.3125, 'gini = 0.0\nsamples = 7\nvalue = [0, 0, 0, 0, 0, 0, 7]'),
 Text(0.3333333333333333, 0.3125, 'X[13] <= 0.5\ngini = 0.375\nsamples = 8\nvalue = [0, 0, 0, 0, 0, 6, 2]'),
 Text(0.2222222222222222, 0.1875, 'X[12] <= 3.0\ngini = 0.245\nsamples = 7\nvalue = [0, 0, 0, 0, 0, 6, 1]'),
 Text(0.1111111111111111, 0.0625, 'gini = 0.0\nsamples = 1\nvalue = [0, 0, 0, 0, 0, 0, 1]'),
 Text(0.3333333333333333, 0.0625, 'gini = 0.0\nsamples = 6\nvalue = [0, 0, 0, 0, 0, 6, 0]'),
 Text(0.4444444444444444, 0.1875, 'gini = 0.0\nsamples = 1\nvalue = [0, 0, 0, 0, 0, 0, 1]'),
 Text(0.6666666666666666, 0.4375, 'X[5] <= 0.5\ngini = 0.408\nsamples = 7\nvalue = [0, 0, 5, 0, 2, 0, 0]'),
 Text(0.5555555555555556, 0.3125, 'gini = 0.0\nsamples = 4\nvalue = [0, 0, 4, 0, 0, 0, 0]'),
 Text(0.7777777777777778, 0.3125, 'X[12] <= 2.0\ngini = 0.444\nsamples = 3\nvalue = [0, 0, 1, 0, 2, 0, 0]'),
 Text(0.6666666666666666, 0.1875, 'gini = 0.0\nsamples = 1\nvalue = [0, 0, 1, 0, 0, 0, 0]'),
 Text(0.8888888888888888, 0.1875, 'gini = 0.0\nsamples = 2\nvalue = [0, 0, 0, 0, 2, 0, 0]'),
 Text(0.6666666666666666, 0.5625, 'gini = 0.0\nsamples = 7\nvalue = [0, 0, 0, 7, 0, 0, 0]'),
 Text(0.7777777777777778, 0.6875, 'gini = 0.0\nsamples = 14\nvalue = [0, 14, 0, 0, 0, 0, 0]'),
 Text(0.8888888888888888, 0.8125, 'gini = 0.0\nsamples = 27\nvalue = [27, 0, 0, 0, 0, 0, 0]')]

from sklearn.metrics import confusion_matrix
confusion_matrix(Y_test,Y_pred)
array([[13,  0,  0,  0,  0,  0],
       [ 0,  6,  0,  0,  0,  0],
       [ 0,  0,  6,  0,  0,  0],
       [ 0,  0,  0,  2,  0,  0],
       [ 0,  0,  0,  0,  2,  0],
       [ 0,  0,  0,  0,  0,  1]])
       
from sklearn.metrics import classification_report
print(classification_report(Y_test, Y_pred))
              precision    recall  f1-score   support

           1       1.00      1.00      1.00        13
           2       1.00      1.00      1.00         6
           4       1.00      1.00      1.00         6
           5       1.00      1.00      1.00         2
           6       1.00      1.00      1.00         2
           7       1.00      1.00      1.00         1

    accuracy                           1.00        30
   macro avg       1.00      1.00      1.00        30
weighted avg       1.00      1.00      1.00        30

 
